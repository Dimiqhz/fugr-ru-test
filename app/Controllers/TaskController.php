<?php
namespace App\Controllers;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use App\Models\Task;
use App\Config\Database;

class TaskController
{
    private Task $taskModel;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    public function __construct()
    {
        $db = Database::getConnection();
        if ($db === null) {
            throw new \Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        }
        $this->taskModel = new Task($db);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
     *
     * @OA\Post(
     *     path="/api/tasks",
     *     summary="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="title", type="string"),
     *             @OA\Property(property="description", type="string"),
     *             @OA\Property(property="due_date", type="string", format="date-time"),
     *             @OA\Property(property="status", type="string"),
     *             @OA\Property(property="priority", type="string"),
     *             @OA\Property(property="category", type="string")
     *         )
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Task created successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="id", type="integer"),
     *             @OA\Property(property="message", type="string")
     *         )
     *     ),
     *     @OA\Response(
     *         response=400,
     *         description="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
     *     ),
     *     @OA\Response(
     *         response=500,
     *         description="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"
     *     )
     * )
     */
    public function createTask(Request $request, Response $response): Response
    {
        $contentType = $request->getHeaderLine('Content-Type');
        if (stripos($contentType, 'application/json') === false) {
            $error = ['error' => 'Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json'];
            $response->getBody()->write(json_encode($error, JSON_UNESCAPED_UNICODE));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(415);
        }

        $data = json_decode($request->getBody()->getContents(), true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            $error = ['error' => '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'];
            $response->getBody()->write(json_encode($error, JSON_UNESCAPED_UNICODE));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(400);
        }

        error_log("üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: " . json_encode($data, JSON_UNESCAPED_UNICODE));

        $allowedStatus = ['–≤—ã–ø–æ–ª–Ω–µ–Ω–∞', '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'];
        $allowedPriority = ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'];

        if (!in_array($data['status'] ?? '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', $allowedStatus, true)) {
            $error = ['error' => '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ status'];
            $response->getBody()->write(json_encode($error, JSON_UNESCAPED_UNICODE));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(400);
        }

        if (!in_array($data['priority'] ?? '—Å—Ä–µ–¥–Ω–∏–π', $allowedPriority, true)) {
            $error = ['error' => '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ priority'];
            $response->getBody()->write(json_encode($error, JSON_UNESCAPED_UNICODE));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(400);
        }

        $data['title'] = htmlspecialchars($data['title'], ENT_QUOTES, 'UTF-8');
        $data['description'] = isset($data['description']) ? htmlspecialchars($data['description'], ENT_QUOTES, 'UTF-8') : null;

        error_log("üü¢ SQL –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: " . json_encode($data, JSON_UNESCAPED_UNICODE));

        $taskId = $this->taskModel->create($data);
        
        if ($taskId === null) {
            error_log("‚ùå –û—à–∏–±–∫–∞: lastInsertId –≤–µ—Ä–Ω—É–ª null");
            $error = ['error' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'];
            $response->getBody()->write(json_encode($error, JSON_UNESCAPED_UNICODE));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(500);
        }

        $result = ['id' => $taskId, 'message' => 'Task created successfully'];
        $response->getBody()->write(json_encode($result, JSON_UNESCAPED_UNICODE));
        return $response->withHeader('Content-Type', 'application/json')->withStatus(201);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
     *
     * @OA\Get(
     *     path="/api/tasks",
     *     summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
     *     @OA\Parameter(
     *         name="search",
     *         in="query",
     *         description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏",
     *         required=false,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Parameter(
     *         name="sort",
     *         in="query",
     *         description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ due_date –∏–ª–∏ create_date",
     *         required=false,
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Parameter(
     *         name="limit",
     *         in="query",
     *         description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
     *         required=false,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
     *         @OA\JsonContent(
     *             type="array",
     *             @OA\Items(type="object")
     *         )
     *     )
     * )
     */
    public function getTasks(Request $request, Response $response): Response
    {
        $params = $request->getQueryParams();
        $search = $params['search'] ?? null;
        $sort   = $params['sort'] ?? null;
        $page   = isset($params['page']) ? (int)$params['page'] : 1;
        $limit  = isset($params['limit']) ? (int)$params['limit'] : 10;

        $tasks = $this->taskModel->getAll($search, $sort, $page, $limit);
        $response->getBody()->write(json_encode($tasks));
        return $response->withHeader('Content-Type', 'application/json');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ ID
     *
     * @OA\Get(
     *     path="/api/tasks/{id}",
     *     summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID",
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         description="ID –∑–∞–¥–∞—á–∏",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
     *         @OA\JsonContent(type="object")
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
     *         @OA\JsonContent(type="object")
     *     )
     * )
     */
    public function getTask(Request $request, Response $response, array $args): Response
    {
        $id = (int)$args['id'];
        $task = $this->taskModel->getById($id);
        if (!$task) {
            $error = ['error' => '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(404);
        }
        $response->getBody()->write(json_encode($task));
        return $response->withHeader('Content-Type', 'application/json');
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
     *
     * @OA\Put(
     *     path="/api/tasks/{id}",
     *     summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         description="ID –∑–∞–¥–∞—á–∏",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="title", type="string"),
     *             @OA\Property(property="description", type="string"),
     *             @OA\Property(property="due_date", type="string", format="date-time"),
     *             @OA\Property(property="status", type="string"),
     *             @OA\Property(property="priority", type="string"),
     *             @OA\Property(property="category", type="string")
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Task updated successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="message", type="string")
     *         )
     *     )
     * )
     */
    public function updateTask(Request $request, Response $response, array $args): Response
    {
        $id = (int)$args['id'];
        $data = (array)$request->getParsedBody();

        $contentType = $request->getHeaderLine('Content-Type');
        if (stripos($contentType, 'application/json') === false) {
            $error = ['error' => 'Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json'];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(415);
        }

        $validationErrors = \App\Services\Validator::validateTaskData($data, true);
        if (!empty($validationErrors)) {
            $error = ['errors' => $validationErrors];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(400);
        }

        if (!$this->taskModel->getById($id)) {
            $error = ['error' => '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(404);
        }

        if (isset($data['title'])) {
            $data['title'] = htmlspecialchars($data['title'], ENT_QUOTES, 'UTF-8');
        }
        if (isset($data['description'])) {
            $data['description'] = htmlspecialchars($data['description'], ENT_QUOTES, 'UTF-8');
        }

        $success = $this->taskModel->update($id, $data);
        if (!$success) {
            $error = ['error' => '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É'];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(500);
        }
        $result = ['message' => 'Task updated successfully'];
        $response->getBody()->write(json_encode($result));
        return $response->withHeader('Content-Type', 'application/json');
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
     *
     * @OA\Delete(
     *     path="/api/tasks/{id}",
     *     summary="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         description="ID –∑–∞–¥–∞—á–∏",
     *         required=true,
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Task deleted successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="message", type="string")
     *         )
     *     )
     * )
     */
    public function deleteTask(Request $request, Response $response, array $args): Response
    {
        $id = (int)$args['id'];

        if (!$this->taskModel->getById($id)) {
            $error = ['error' => '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(404);
        }
        $success = $this->taskModel->delete($id);
        if (!$success) {
            $error = ['error' => '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'];
            $response->getBody()->write(json_encode($error));
            return $response->withHeader('Content-Type', 'application/json')->withStatus(500);
        }
        $result = ['message' => 'Task deleted successfully'];
        $response->getBody()->write(json_encode($result));
        return $response->withHeader('Content-Type', 'application/json');
    }
}
